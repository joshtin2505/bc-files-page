---
// Componente CopyToClipboard.astro

interface Props {
  text: string
}

const { text } = Astro.props
const textJoin = text.split(" ").join("-")
const btnId = textJoin + "-copy-btn"
---

<astro-copy data-text={text} data-copy={btnId} class="w-full max-w-48 sm:max-w-64">
  <div class="relative">
    <label for={textJoin} class="sr-only">Label</label>
    <input
      id={textJoin}
      type="text"
      class="col-span-6 bg-neutral-50 border border-neutral-300 text-neutral-500 text-sm rounded-lg focus:ring-green-500 focus:border-green-500 block w-full h-12 dark:bg-neutral-700 dark:border-neutral-600 dark:placeholder-neutral-400 dark:text-neutral-400 dark:focus:ring-green-500 dark:focus:border-green-500"
      value={text}
      disabled
      readonly
    />
    <button
      data-copy-to-clipboard-target={textJoin}
      data-tooltip-target="tooltip-copy-npm-install-copy-button"
      id={btnId}
      class="copyElement absolute end-2 top-1/2 -translate-y-1/2 text-neutral-500 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-800 rounded-lg p-2 inline-flex items-center justify-center"
    >
      <span id="default-icon">
        <svg
          class="w-3.5 h-3.5"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 18 20"
        >
          <path
            d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"
          ></path>
        </svg>
      </span>
      <span id="success-icon" class="hidden inline-flex items-center">
        <svg
          class="w-3.5 h-3.5 text-green-700 dark:text-green-500"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 16 12"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M1 5.917 5.724 10.5 15 1.5"></path>
        </svg>
      </span>
    </button>
    <div
      id="tooltip-copy-npm-install-copy-button"
      role="tooltip"
      class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-neutral-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-neutral-700"
    >
      <span id="default-tooltip-message">Copy to clipboard</span>
      <span id="success-tooltip-message" class="hidden">Copied!</span>
      <div class="tooltip-arrow" data-popper-arrow></div>
    </div>
  </div>
</astro-copy>
<script>
  class CopyToClipboard extends HTMLElement {
    constructor() {
      super()

      const { text, copy } = this.dataset

      const copyBtn = document.getElementById(copy as string)
      const defaultToolType = document.getElementById("default-tooltip-message")
      const successToolType = document.getElementById("success-tooltip-message")
      const defaultIcon = document.getElementById("default-icon")
      const successIcon = document.getElementById("success-icon")

      copyBtn?.addEventListener("click", () => copyToClipboard(text as string))
      const copyToClipboard = (textToCopy: string) => {
        try {
          navigator.clipboard.writeText(textToCopy)
          defaultToolType?.classList.add("hidden")
          successToolType?.classList.remove("hidden")
          defaultIcon?.classList.add("hidden")
          successIcon?.classList.remove("hidden")

          setTimeout(() => {
            defaultToolType?.classList.remove("hidden")
            successToolType?.classList.add("hidden")
            defaultIcon?.classList.remove("hidden")
            successIcon?.classList.add("hidden")
          }, 3000)
        } catch (err) {
          console.error("Error al copiar al portapapeles:", err)
        } finally {
          return "end"
        }
      }
    }
  }
  customElements.define("astro-copy", CopyToClipboard)
</script>
